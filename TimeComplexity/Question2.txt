Q1.
An algorithm consists of two independent piece of code, having complexities f(n) and g(n) respectively. What would be the complexity of the complete algorithm

A) f(n) x g(n)
B) MAX( f(n), g(n) )
C) MIN ( f(n), g(n) )
D) f(n) + g(n)

Ans-
B) MAX( f(n), g(n) )


Q2. 
What is the time, space complexity of following code :

int a = 0, b = 0;    
for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
        a = a + j;
    }
}
for (k = 0; k < N; k++) {
    b = b + k;
}

A) O(n^2) time, O(1) space
B) O(n) time, O(n) space
C) O(n) time, O(n) space
D) O(n^2) time, O(n) space
E) O(n^3) time, O(1) space

Ans-
A) O(n^2) time, O(1) space

The first set of nested loops is O(n^2) and the second loop is O(n). 
This is O(max(n^2,n)) which is O(n^2). 


Q3.
What is the time complexity of following code :

int count = 0;
for (int i = N; i > 0; i /= 2) {
    for (int j = 0; j < i; j++) {
        count += 1;
    }
}

A) O(n^2)
B) O(nLog n)
C) O(nLog(Log(n)))
D) O(n)
E) O(nSqrt(n))

Ans-
D) O(n)

In the first iteration, the j loop runs N times.
In the second iteration, the j loop runs N / 2 times. 
In the ith iteration, the j loop runs N / 2^i times. 
So, the total number of runs of loop = N + N / 2 + N / 4 + ... 1 
= **N * ( 1 + 1/2 + 1/4 + 1/8 + ... ) < 2 * N** 


Q4.
What is the time complexity of following code :

int a = 0;
for (i = 0; i < N; i++) {
    for (j = N; j > i; j--) {
        a = a + i + j;
    }
}

A) O(n)
B) O(nlog(n))
C) O(nSqrt(n))
D) O(n^2)

Ans-
D) O(n^2)

Total number of runs = N + (N - 1) + (N - 2) + ... 1 + 0
= N * (N + 1) / 2
= 1/2 * N^2 + 1/2 * N
O(N^2) times. 


Q5.
To measure Time complexity of an algorithm Big O notation is used which:

A) describes limiting behaviour of the function
B) characterises a function based on growth of function
C) upper bound on growth rate of the function
D) all of the mentioned

Ans-
D) all of the mentioned


Q6.
What is the time complexity of following code :

for (int i = 3 ; i < n / 3  ;  i += 3) {
    for(int j = 2 ; j < n / 2 ; j += 2){
        // O(1) operation  
    }
}

A) O ( n )
B) O ( n ^ 3)
C) O ( n ^ 2)
D) O ( n ^ (1/3) )
E) None of these

Ans-
C) O(n^2)

Even though the first loop is increased by 3 and ends at n/3 ,and the inner loop is incresed by 2 and end at n/2 , the big-O runtime doen’t consider constants . Hence the overall time complexity will be O(N^2)


Q7.
What is the time complexity of following code :

public void solve() {
    int i = 1;
    while (i < n) {
        int x = i;
        while (x-- > 0) {
            //O(1) operation
        }
        i++;
    }
}

A) O(nlogn)
B) O(n)
C) O(n sqrt(n))
D) O(n^2)
E) None of the above

Ans-
D) O(n^2)

The total number of operations taking place is the sum of first n natural numbers, which is equal to n * (n + 1) / 2.
Therefore, the time complexity is O(n2).

Q8.
What is the time complexity of following code :

int i = 0;
while(i*i <= N){
   for(int j = 0; j <= N; j++){
      for(int k = 0; k <= N; k++,i++){
         //O(1) operation
      }
   }
   i++;
}

A) O(NlogN)
B) O(N^3)
C) O(N^2 sqrt(N))
D) O(N^2)
E) None of these

Ans-
D) O(N^2)

The nested for loop will have time complexity of O(N^2) and as during the loop run it also increments the variable i greater sqrt(N) the while will stop after the nested loop stops.Hence final time complexity will be O(N^2)

Q9.
What is the time complexity of following code :

for(int i = 0; i < n; i++){
    for(int j = i - 1; j >= 0; j++){
            ans += i + j ;
    }
}

A) O(n)
B) O(n^2)
C) Code will run indefinitely
D) O(1)
E) None of the above

Ans-
C) Code will run indefinitely

Since the end of the loop is set 0 and its start is i-1 and variable j is increased rather than decreasing , j will always be greater or equal to 0


Q10.
What is the Time Complexity of following snippet ?

for (i = 0; i < N; i++) { 
  for (j = i; j < N; j++) { 
     break; 
  }
}

A) O(N*N)
B) O(N*log(N))
C) O(N)
D) O(log(N))
E) None of the above

Ans-
C) O(N)

Here for every i the inner loop will run for only interation. So the complexity is the number of times outer loop will run.
That is N so complexity is O(N).

Q11.
What is the Time Complexity of following snippet ?

int count =0;
while(N > 0){
    count++;
    N/=3;
}

A) O(N)
B) O(N*N)
C) O(Nlog(N))
D) O(log(N)) {Base 3}
E) O(log(N)) {Base 2}

Ans-
D) O(log(N)) {Base 3}

We have to find k such that,
N/(3^k) = 0
We will approx it to, N/(3^k) = 1
Or, N = 3^k
Taking log we will get k=logN where base is 3.


Q12.
Find the Time Complexity of the following function solve :

public void solve(int N) {
    for(int i = 0; i < (1 << N); i++) {
        int j = i;
        while(j > 0){
            j -= 1;
        }
    }
}

A) O(N * N)
B) O(2^N)
C) O(N * (2^N))
D) O(3^N)
E) O(4^N)

Ans-
E) O(4^N)

The outer loops runs from 1 to 2^ N.
The inner loop runs from i to 0.
So, worst case TC will be O((2^N)^2) = O(4^N).


Q13.
What is the time complexity of following code :

public static void fun(int n) {
    int i, j;
    for (i = 1; i * i <= n; i++) {
        for (j = 1; j * j <= i; j += i) {
            //O(1) operation
        }
    }
}
 
A) O(n)
B) O(√n)
C) O(n√n)
D) O(√n*log(√n))

Ans-
B) O(√n)
The outer loop wil run √n times. The inner loop will run only for j = 1 since 1 + i > √i. Thus, the time complexity is O(√n).

