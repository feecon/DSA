Prefix Sum Array -

                       0 1  2 3 4
normal array, ar[5] = [4,2,-2,4,9]
prefix sum array, prefixSum[5] = [4,6,4,8,17]

observations-
1) length of prefixSum[] is same as ar[]
2) prefixSum[0] = ar[0]
3) prefixSum[i] = prefixSum[i-1] + ar[i]

PseudoCode -
creating a prefix sum array
//Given input ar[]

int[] pS(int arr[]){
    N = arr.length;
    int prefixSum[] = new int[N];
    prefixSum[0] = arr[0];

    i =1; i<N ; i++){
        prefixSum[i] = prefixSum[i-1] + arr[i];
    }
    return prefixSum;
}
------------------------------------------------------
------------------------------------------------------

Range Sum Query-
                       0 1  2 3 4
normal array, ar[5] = [4,2,-2,4,9]
                                  0 1 2 3 4
prefix sum array, prefixSum[5] = [4,6,4,8,17]

sum[0,3] = 4+2+(-2)+4 = 8 => prefixSum[3]
sum[0,1] = 4 + 2 =6 => prefixSum[1]
sum[2,4] = -2 + 4 + 9 = 11 => prefixSum[4] - prefixSum[1]
sum[1,3] = 2 + (-2) + 4 = 4 => prefixSum[3] - prefixSum[0]

in general -
sum[L,R] = prefixSum[R] - prefixSum[L-1]

edge case - 
if(L==0)
    sum[0,R] = prefixSum[R]
else
    sum[L,R] = prefixSum[R] - prefixSum[L-1]

------------------------------------------------------
------------------------------------------------------
EQUILIBRIUM INDEX
-> An index i is said to be equilibrium if 
[Sum of all elements before ith index] = [Sum of all elements after ith index]
-> leftsum[0, i-1] == rightsum[i+1 , n-1]
-> Edge case
    if i == 0 => sum[left] = 0      if i == N-1 => sum[right] = 0
         0

   i  :   0 1 2  3 
ar[4] = [-3,2,4,-1] --> 2 is an equilibrium index

  i  :   0  
ar[1] = [-3]   --> 0 is an equilibrium index

idea-
Check if every index is equilibrium or not.

PseudoCode-
int countEqui(int ar[]){
    int n = ar.length;
    int count = 0;
    prefixSum[n]; 
    for(i =0 ; i<n ; i++){
        //if my i is equilibrium
        //leftSum = sum[0,i-1]
        if(i>0){
            leftSum = prefixSum[i-1];
        } 
        
        //rightSum = sum[i+1, n-1]
        rightSum = prefixSum[n-1] - prefixSum[i];

        if(leftSum == rightSum)
            count = count + 1;
        
    }
    return count;
   
}

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
date - 16 july 2022

Q.1: given array, we have to find the maximum element in the array.
         0 1 2  3 4  5
ar[6] = [5,3,6,10,2,-2]

idea-
1) iterate whole array, check if arr[i] is greater than max, then update the max

pscode-
int max(int arr[]){
    int n = arr.length;
    int maxElement = Integer.MIN_VALUE;
    for(i = 0 ; i < n ; i++){
        //check if the arr[i] is greater than max element
        if(maxElement<arr[i]){
            maxElement = arr[i]
        }
    }
    return maxElement;
}


Q.2: given an array of n elements, we have to find sum of all the even numbers and sum of all odd elements 
         0 1 2  3 4  5
ar[6] = [5,3,6,10,2,-2]

idea -
1. iterate over the array, check for the even numbers, find their sum 
2. iterate over the array, check for the odd numbers, find their sum

void oddEven(arr){
    n = arr.length;
    even[] = new int[n];
    odd[] = new int[n];
    for(i =0 ; i<n ; i++){
        //check for even elements
        if(arr[i]%2==0){
            even[i] = arr[i]
        }
        else{
            odd[i] = arr[i];
        }
    }
    syso(Arrays.toString(even));
    syso(Arrays.toString(odd));
    
}
----------------------------------------------------------
Prefix sum 2
Q: Given n array elements and Q queries. for each query iterate and get sum of all even index element in given range.
         0 1 2 3  4 5 6 7 8
ar[9] = [3,2,1,6,-3,2,8,4,9]

sumEven[4,8] --> -3 + 8 + 9 = 14
sumEven[1,4] -->


1 5 9  7 2 1
-----------------------------------------------------
date - 18/07/2022

  0 1 2 3 4 5 6 7
  1 1 0 1 1 1 0 1  ---> c = 6 

  0 1 2 3 4 5 6 7 8
  0 1 1 1 0 1 1 0 0

  0 1 1 1 0 1 1 0 1 1 0 ---> ans = 6

count of 1s --> n
count of 1st for every 0s --> c




 0 1 2 3 4 5
 5 4 9 8 2 4

 for(i = 0 ; i< n ; ++i)  left to right
 for( i = n-1 ; i>=0 ; i--) right to left

 String s = "feecon";
 sopln(method(s));
 --------------------------------19th july 2022-----------------------------------------------
 2D  Arrays - Matrix

 Declaration of 2d array:
 mat[][] = new int[n][m];

 dec + initialise
 mat[][] = { 
               0 1 . . .  m-1
           0  {1,2,3,4 ,5 ,6},
           1  {7,8,9,10,11,12},
           .  {13,14,15,16,17},
           .  {13,14,15,16,17},
          n-1 {13,14,15,16,17},
          };
horizontal --> rows --> n-1
Vertical ---> cols  --> m-1

1 == mat[0][0]
6 == mat[0][m-1]
13 == mat[n-1][0]
17 == mat[n-1][m-1]

Observation:
1) if we iterate on the row, col changes from [0, m-1]
2) if we iterate on the col, row changes from [0, n-1]

Q1: given mat[n][m] , print all the elements
sol:  idea-
        1) atleast we need to iterate over all the elements once, hence we need two nested loops to print all elements

        code :

        void print(int mat[][]){
            int n= mat.length;
            int m = mat[0].length;

            for(i=0;i<n;i++){
                for(j=0;j<m;j++){
                    print(mat[i][j]);
                }
                print(new line);
            }

        }


Q2: Given a mat[n][m] , print row wise sum.

mat[][]

1   2  3  4  5  = 15
6   7  8  9 10  = 
11 12 13 14 15  =
16 17 18 19 20  =
21 22 23 24 25  =

obs - 
1) if we are finding row sum, then iteratte over the cols.

code:
 rowSum(int mat[][]){

  //printing sum row wise
  for(i = 0; i<n ;i++){
     int sum =0;
     //col changes while sum
    for(j = 0;j<m ;j++){
        sum = sum + mat[i][j];
    }
    print(sum);  
  }
   
 }
     